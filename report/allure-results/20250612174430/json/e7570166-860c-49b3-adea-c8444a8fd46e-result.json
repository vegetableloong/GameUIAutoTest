{"name": "test_appstart", "status": "broken", "statusDetails": {"message": "airtest.core.error.AdbShellError: stdout[b''] stderr[b'']", "trace": "self = <airtest.core.android.adb.ADB object at 0x0000025FFFF19D00>\ncmd = 'pidof com.neptune.domino'\n\n    def shell(self, cmd):\n        \"\"\"\n        Run the `adb shell` command on the device\n    \n        Args:\n            cmd: a command to be run\n    \n        Raises:\n            AdbShellError: if command return value is non-zero or if any other `AdbError` occurred\n    \n        Returns:\n            command output\n    \n        \"\"\"\n        if self.sdk_version < SDK_VERISON_ANDROID7:\n            # for sdk_version < 25, adb shell do not raise error\n            # https://stackoverflow.com/questions/9379400/adb-error-codes\n            cmd = split_cmd(cmd) + [\";\", \"echo\", \"---$?---\"]\n            out = self.raw_shell(cmd).rstrip()\n            m = re.match(\"(.*)---(\\d+)---$\", out, re.DOTALL)\n            if not m:\n                warnings.warn(\"return code not matched\")\n                stdout = out\n                returncode = 0\n            else:\n                stdout = m.group(1)\n                returncode = int(m.group(2))\n            if returncode > 0:\n                raise AdbShellError(\"\", stdout)\n            return stdout\n        else:\n            try:\n>               out = self.raw_shell(cmd)\n\n.venv\\lib\\site-packages\\airtest\\core\\android\\adb.py:414: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\lib\\site-packages\\airtest\\core\\android\\adb.py:372: in raw_shell\n    out = self.cmd(cmds, ensure_unicode=False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <airtest.core.android.adb.ADB object at 0x0000025FFFF19D00>\ncmds = ['shell', 'pidof', 'com.neptune.domino'], device = True\nensure_unicode = False, timeout = None\n\n    def cmd(self, cmds, device=True, ensure_unicode=True, timeout=None):\n        \"\"\"\n        Run the adb command(s) in subprocess and return the standard output\n    \n        Args:\n            cmds: command(s) to be run\n            device: if True, the device serial number must be specified by -s serialno argument\n            ensure_unicode: encode/decode unicode of standard outputs (stdout, stderr)\n            timeout: timeout in seconds\n    \n        Raises:\n            DeviceConnectionError: if any error occurs when connecting the device\n            AdbError: if any other adb error occurs\n    \n        Returns:\n            command(s) standard output (stdout)\n    \n        \"\"\"\n        proc = self.start_cmd(cmds, device)\n        if timeout:\n            stdout, stderr = proc_communicate_timeout(proc, timeout)\n        else:\n            stdout, stderr = proc.communicate()\n    \n        if ensure_unicode:\n            stdout = stdout.decode(get_std_encoding(sys.stdout))\n            stderr = stderr.decode(get_std_encoding(sys.stderr))\n    \n        if proc.returncode > 0:\n            # adb connection error\n            pattern = DeviceConnectionError.DEVICE_CONNECTION_ERROR\n            if isinstance(stderr, binary_type):\n                pattern = pattern.encode(\"utf-8\")\n            if re.search(pattern, stderr):\n                raise DeviceConnectionError(stderr)\n            else:\n>               raise AdbError(stdout, stderr)\nE               airtest.core.error.AdbError: stdout[b''] stderr[b'']\n\n.venv\\lib\\site-packages\\airtest\\core\\android\\adb.py:237: AdbError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_login.TestLogin object at 0x0000025FFFF19610>\n\n    def test_appstart(self):\n        startApp()\n        #判断应用是否启动\n>       running = shell(f\"pidof {package_name}\")\n\nmodules\\function\\login\\test_login.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\lib\\site-packages\\airtest\\utils\\logwraper.py:134: in wrapper\n    res = f(*args, **kwargs)\n.venv\\lib\\site-packages\\airtest\\core\\api.py:173: in shell\n    return G.DEVICE.shell(cmd)\n.venv\\lib\\site-packages\\airtest\\core\\android\\android.py:505: in shell\n    return self.adb.shell(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <airtest.core.android.adb.ADB object at 0x0000025FFFF19D00>\ncmd = 'pidof com.neptune.domino'\n\n    def shell(self, cmd):\n        \"\"\"\n        Run the `adb shell` command on the device\n    \n        Args:\n            cmd: a command to be run\n    \n        Raises:\n            AdbShellError: if command return value is non-zero or if any other `AdbError` occurred\n    \n        Returns:\n            command output\n    \n        \"\"\"\n        if self.sdk_version < SDK_VERISON_ANDROID7:\n            # for sdk_version < 25, adb shell do not raise error\n            # https://stackoverflow.com/questions/9379400/adb-error-codes\n            cmd = split_cmd(cmd) + [\";\", \"echo\", \"---$?---\"]\n            out = self.raw_shell(cmd).rstrip()\n            m = re.match(\"(.*)---(\\d+)---$\", out, re.DOTALL)\n            if not m:\n                warnings.warn(\"return code not matched\")\n                stdout = out\n                returncode = 0\n            else:\n                stdout = m.group(1)\n                returncode = int(m.group(2))\n            if returncode > 0:\n                raise AdbShellError(\"\", stdout)\n            return stdout\n        else:\n            try:\n                out = self.raw_shell(cmd)\n            except AdbError as err:\n>               raise AdbShellError(err.stdout, err.stderr)\nE               airtest.core.error.AdbShellError: stdout[b''] stderr[b'']\n\n.venv\\lib\\site-packages\\airtest\\core\\android\\adb.py:416: AdbShellError"}, "attachments": [{"name": "log", "source": "064b4b00-1cd1-4f63-b517-6a52c98609d1-attachment.txt", "type": "text/plain"}], "start": 1749721475649, "stop": 1749721496136, "uuid": "995e4bdb-d734-422b-9c1f-45d7a5d40192", "historyId": "531f275fbe43bf30e09cbd98a9e6611a", "testCaseId": "531f275fbe43bf30e09cbd98a9e6611a", "fullName": "modules.function.login.test_login.TestLogin#test_appstart", "labels": [{"name": "parentSuite", "value": "modules.function.login"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "DESKTOP-AQCH3I7"}, {"name": "thread", "value": "23128-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "modules.function.login.test_login"}]}